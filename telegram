import time
from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import json





#all tokens
BOT_USERNAME: Final = "@gpt_Chatsbot"
openai.api_key = "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"
TOKEN: Final = "6158021820:AAEL8xiWSctGq6-XeCXOCdj3O1WFc7TVq2w"
MODEL_NAME = "gpt-3.5-turbo"
MAX_TOKENS = 193
TEMPERATURE = 0

def generate_response(prompt):
    try:

        # Call OpenAI API to generate response
        response = openai.ChatCompletion.create(
            model=MODEL_NAME,
            messages=[
                {'role': 'user', 'content': prompt},

            ],
            temperature=0,
            stream=False
        )
        reply_content = response['choices'][0]['message']['content']
        return reply_content
    except openai.OpenAIError as e:
        # Raise an exception if an error occurs
        raise ValueError(f'Error occurred during API call: {e}')


print('Starting up bot...')


# Lets us use the /start command
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Hello there! I\'m a bot. What\'s up?')


# Lets us use the /help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Try typing anything and I will do my best to respond!')


# Lets us use the /custom command
async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('This is a custom command, you can add whatever text you want here.')


def handle_response(text: str) -> str:
    # Create your own response logic
    processed: str = text.lower()
    response = generate_response(processed)

    return response


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Get basic info of the incoming message
    message_type: str = update.message.chat.type
    text: str = update.message.text

    # Print a log for debugging
    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    # React to group messages only if users mention the bot directly
    if message_type == 'group':
        # Replace with your bot username
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str = handle_response(new_text)
        else:
            return  # We don't want the bot respond if it's not mentioned in the group
    else:
        response: str = handle_response(text)

    # Reply normal if the message is in private
    print('Bot:', response)
    await update.message.reply_text(response)


# Log errors
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')


# Run the program
if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Log all errors
    app.add_error_handler(error)

    print('Polling...')
    # Run the bot
    app.run_polling(poll_interval=5)
